//-----------------------------------------------------------------------------------------------------
//  Source      : FileName.cpp
//  Created     : 01.06.2022
//  Author      : Alexandr Volvenkin
//  email       : aav-36@mail.ru
//  GitHub      : https://github.com/AlexandrVolvenkin
//-----------------------------------------------------------------------------------------------------
#include "LightBoard.h"
#include "Platform.h"
#include "Pss21.h"

//-------------------------------------------------------------------------------------------------
// Массив управления драйверами светодиодов на панели.
uint8_t CLightBoard::m_auiBoardLampsControl[m_uiBoardLedNumber];
// Карта соответствия индекса окна на панели и индекса состояния светодиода в массиве управления.
__flash uint8_t CLightBoard::m_auiLedMap[] =
{
    // Индекс окна на панели сопоставлен с выходом драйвера управления светодиодом на схеме.
    // На схеме панели 4 драйвера по 16 выходов. Два драйвера на левой стороне(плата МЦП-21-24)
    // и два драйвера на правой стороне(плата МРИ-21-24).
    // Длина массива управления драйверами 16 * 4 = 64 выхода.
    // Последовательность адресации выходов драйверов в массиве:
    // (0-15) - DD1 плата МРИ-21-24, (16-31) - DD2 плата МРИ-21-24,
    // (32-47) - DD1 плата МЦП-21-24, (48-63) - DD2 плата МЦП-21-24.
    // Последовательное продвижение состояния светодиода в массиве управления идёт от
    // младшего адреса к старшему.
    // Последовательное продвижение состояния светодиода в сдвиговом регистре драйвера идёт от
    // младшего выхода к старшему. Поэтому, состояние светодиода по нулевому индексу в массиве управления,
    // после 64 сдвигов придёт на выход OUT15 драйвера DD1 платы МРИ-21-24, что соответстствует индексу окна 6.
    // Например: Индекс окна - 7 сопоставлен с индексом 13 в массиве управления и выходом OUT2 драйвера DD1 плата МРИ-21-24.
    // Например: Индекс окна - 10 сопоставлен с индексом 33 в массиве управления и выходом OUT14 драйвера DD1 плата МЦП-21-24.
    // Левая часть.    // Правая часть.
    48, 60, 32, 45,    16, 28, 0, 13,
    49, 61, 33, 44,    17, 29, 1, 12,
    52, 62, 36, 43,    20, 30, 4, 11,
    53, 63, 37, 42,    21, 31, 5, 10,
    54, 57, 38, 41,    22, 25, 6,  9,
    55, 56, 39, 40,    23, 24, 7,  8,
};

////-----------------------------------------------------------------------------------------------------
//CLightBoard::CLightBoard()
//{
////    Init();
//}
//
////-----------------------------------------------------------------------------------------------------
//CLightBoard::~CLightBoard()
//{
//
//}

//-----------------------------------------------------------------------------------------------------
void CLightBoard::Init(CAlarmWindow* pxAlarmWindowControl)
{
    // Включим панель.
    CPlatform::LedDriverEnable1On();
    CPlatform::LedDriverEnable2On();
    CPlatform::LedDriverEnable3On();
    CPlatform::LedDriverEnable4On();
    CPlatform::LedDriverEnable1SetPinOutput();
    CPlatform::LedDriverEnable2SetPinOutput();
    CPlatform::LedDriverEnable3SetPinOutput();
    CPlatform::LedDriverEnable4SetPinOutput();

    CDM134::Init();
}

//-----------------------------------------------------------------------------------------------------
void CLightBoard::Set(CAlarmWindow* pxAlarmWindowControl)
{
    for (uint8_t i = 0;
            i < ALARM_WINDOWS_NUMBER;
            i++)
    {
        // Окно сигнализации активно?
        if (pxAlarmWindowControl[i].GetActivityState())
        {
            m_auiBoardLampsControl[m_auiLedMap[i]] = 1;
        }
        else
        {
            m_auiBoardLampsControl[m_auiLedMap[i]] = 0;
        }

//        CPss21::m_aucRtuHoldingRegistersArray[i] = pxAlarmWindowControl[i].GetActivityState();
    };

    // Зажжём активные светодиоды.
    CDM134::Set(m_auiBoardLampsControl, m_uiBoardLedNumber);
}
